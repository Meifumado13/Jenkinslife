pipeline {
    agent any

    environment {
        AWS_REGION = '<AWS_REGION>' // Example: "us-east-1"
        SONARQUBE_URL = "<SONARCLOUD_URL>" // Example: "https://sonarcloud.io"
        JIRA_SITE = "<JIRA_SITE_URL>" // Example: "https://yourcompany.atlassian.net"
        JIRA_PROJECT = "<JIRA_PROJECT_KEY>" // Example: "DEVOPS", "SECURITY", "SCRUM"
    }

    stages {
        stage('Set AWS Credentials') {
            steps {
                withCredentials([aws(credentialsId: '<AWS_CREDENTIALS_ID>', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
                    aws sts get-caller-identity
                    '''
                }
            }
        }

        stage('Checkout Code') {
            steps {
                git branch: '<GIT_BRANCH>', url: '<GIT_REPOSITORY_URL>'
            }
        }

        stage('Static Code Analysis (SAST)') {
            steps {
                script {
                    withCredentials([string(credentialsId: '<SONARQUBE_TOKEN_ID>', variable: 'SONAR_TOKEN')]) {

                        def scanStatus = sh(script: '''
                            ${SONAR_SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=<SONAR_PROJECT_KEY> \
                            -Dsonar.organization=<SONAR_ORGANIZATION> \
                            -Dsonar.host.url=${SONARQUBE_URL} \
                            -Dsonar.login=${SONAR_TOKEN}
                        ''', returnStatus: true)

                        if (scanStatus != 0) {
                            def sonarIssues = sh(script: '''
                                curl -s -u ${SONAR_TOKEN}: \
                                "${SONARQUBE_URL}/api/issues/search?componentKeys=<SONAR_PROJECT_KEY>&severities=BLOCKER,CRITICAL&statuses=OPEN" | jq -r '.issues[].message' || echo "No issues found"
                            ''', returnStdout: true).trim()

                            if (!sonarIssues.contains("No issues found")) {
                                def issueDescription = """ 
                                    **SonarCloud Security Issues:**
                                    ${sonarIssues}
                                """.stripIndent()

                                echo "Creating Jira Ticket for SonarCloud issues..."
                                createJiraTicket("SonarQube Security Vulnerabilities Detected", issueDescription)
                                env.SCAN_FAILED = "true"
                            }
                        }
                    }
                }
            }
        }

        stage('Snyk Security Scan') {
            steps {
                script {
                    withCredentials([string(credentialsId: '<SNYK_AUTH_TOKEN_ID>', variable: 'SNYK_TOKEN')]) {
                        sh 'export SNYK_TOKEN=${SNYK_TOKEN}'

                        def snykScanStatus = sh(script: "snyk iac test --json --severity-threshold=low > snyk-results.json || echo 'Scan completed'", returnStatus: true)
                        echo "Snyk Scan Status: ${snykScanStatus}"

                        sh "cat snyk-results.json"
                        sh "jq -c '.infrastructureAsCodeIssues | map({title, severity, impact, resolution})' snyk-results.json > snyk-issues-parsed.json"

                        def snykIssuesList = readJSON(file: "snyk-issues-parsed.json")
                        echo "DEBUG: Total Snyk Issues Found: ${snykIssuesList.size()}"

                        if (snykIssuesList.size() > 0) {
                            for (issue in snykIssuesList) {
                                def issueTitle = "Snyk Issue: ${issue.title} - Severity: ${issue.severity}"
                                def issueDescription = """
                                Impact: ${issue.impact}
                                Resolution: ${issue.resolution}
                                """

                                def jiraIssueKey = createJiraTicket(issueTitle, issueDescription)
                                echo "Jira Ticket Created: ${jiraIssueKey}"

                                env.SCAN_FAILED = "true"
                            }
                        } else {
                            echo "DEBUG: No issues to process."
                        }
                    }
                }
            }
        }

        stage('Aqua Trivy Security Scan') {
            steps {
                script {
                    def trivyScanStatus = sh(script: '''
                        trivy config -f json . | tee trivy-report.json || true
                    ''', returnStatus: true)

                    if (!fileExists('trivy-report.json')) {
                        echo "Trivy report not found. Skipping analysis."
                        return
                    }

                    def trivyIssues = sh(script: '''
                        jq -c '.Results[].Misconfigurations[] | {title: .ID, severity: .Severity, description: .Description, resolution: .Resolution}' trivy-report.json || echo ''
                    ''', returnStdout: true).trim().split("\n")

                    if (trivyIssues.size() > 0 && trivyIssues[0].trim() != "") {
                        for (issue in trivyIssues) {
                            def parsedIssue = readJSON(text: issue)
                            def issueTitle = "Trivy Issue: ${parsedIssue.title} - Severity: ${parsedIssue.severity}"
                            def issueDescription = """
                            Description: ${parsedIssue.description}
                            Resolution: ${parsedIssue.resolution}
                            """

                            def jiraIssueKey = createJiraTicket(issueTitle, issueDescription)
                            echo "Jira Ticket Created: ${jiraIssueKey}"

                            env.SCAN_FAILED = "true"
                        }
                    } else {
                        echo "No security vulnerabilities detected by Trivy."
                    }
                }
            }
        }

        stage('Fail Pipeline if Any Scan Fails') {
            steps {
                script {
                    if (env.SCAN_FAILED?.trim() == "true") {
                        error("Security vulnerabilities detected! See Jira tickets for details.")
                    }
                }
            }
        }
    }
}

        stage('Initialize Terraform') {
            steps {
                sh 'terraform init'
            }
        }

        stage('Plan Terraform') {
            steps {
                withCredentials([aws(credentialsId: 'AWS_SECRET_ACCESS_KEY', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                    terraform plan -out=tfplan
                    '''
                }
            }
        }

        stage('Apply Terraform') {
            steps {
                input message: "Approve Terraform Apply?", ok: "Deploy"
                withCredentials([aws(credentialsId: 'AWS_SECRET_ACCESS_KEY', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                    export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                    terraform apply -auto-approve tfplan
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Terraform deployment completed successfully!'
        }

        failure {
            echo 'Terraform deployment failed!'
        }
    }
}

def createJiraTicket(String issueTitle, String issueDescription) {
    script {
        withCredentials([
            string(credentialsId: '<JIRA_API_TOKEN>', variable: 'JIRA_TOKEN'),
            string(credentialsId: '<JIRA_EMAIL>', variable: 'JIRA_USER')
        ]) {
            def formattedDescription = issueDescription.replaceAll('"', '\\"')

            def jiraPayload = """
            {
                "fields": {
                    "project": { "key": "<JIRA_PROJECT_KEY>" },
                    "summary": "${issueTitle}",
                    "description": {
                        "type": "doc",
                        "version": 1,
                        "content": [
                            {
                                "type": "paragraph",
                                "content": [
                                    {
                                        "type": "text",
                                        "text": "${formattedDescription}"
                                    }
                                ]
                            }
                        ]
                    },
                    "issuetype": { "name": "Bug" }
                }
            }
            """

            writeFile file: 'jira_payload.json', text: jiraPayload

            withEnv(["JIRA_CREDS=${JIRA_USER}:${JIRA_TOKEN}"]) {
                def createResponse = sh(script: '''
                    export JIRA_CREDS
                    curl -X POST "<JIRA_SITE_URL>/rest/api/3/issue" \
                    -u "$JIRA_CREDS" \
                    -H "Content-Type: application/json" \
                    --data @jira_payload.json
                ''', returnStdout: true).trim()

                echo "Jira Response: ${createResponse}"
                def createdIssue = readJSON(text: createResponse)

                if (!createdIssue.containsKey("key")) {
                    error("Jira ticket creation failed! Response: ${createResponse}")
                }

                return createdIssue.key
            }
        }
    }
}
